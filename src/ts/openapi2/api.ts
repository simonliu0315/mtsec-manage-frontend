/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AlertVM
 */
export interface AlertVM {
    /**
     * 
     * @type {string}
     * @memberof AlertVM
     */
    'version'?: string;
    /**
     * 
     * @type {string}
     * @memberof AlertVM
     */
    'groupKey'?: string;
    /**
     * 
     * @type {number}
     * @memberof AlertVM
     */
    'truncatedAlerts'?: number;
    /**
     * 
     * @type {string}
     * @memberof AlertVM
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof AlertVM
     */
    'receiver'?: string;
    /**
     * 
     * @type {object}
     * @memberof AlertVM
     */
    'groupLabels'?: object;
    /**
     * 
     * @type {object}
     * @memberof AlertVM
     */
    'commonLabels'?: object;
    /**
     * 
     * @type {object}
     * @memberof AlertVM
     */
    'commonAnnotations'?: object;
    /**
     * 
     * @type {string}
     * @memberof AlertVM
     */
    'externalURL'?: string;
    /**
     * 
     * @type {Array<Alerts>}
     * @memberof AlertVM
     */
    'alerts'?: Array<Alerts>;
}
/**
 * 
 * @export
 * @interface Alerts
 */
export interface Alerts {
    /**
     * 
     * @type {string}
     * @memberof Alerts
     */
    'status'?: string;
    /**
     * 
     * @type {object}
     * @memberof Alerts
     */
    'labels'?: object;
    /**
     * 
     * @type {object}
     * @memberof Alerts
     */
    'annotations'?: object;
    /**
     * 
     * @type {string}
     * @memberof Alerts
     */
    'startsAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Alerts
     */
    'endsAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Alerts
     */
    'generatorURL'?: string;
    /**
     * 
     * @type {string}
     * @memberof Alerts
     */
    'fingerprint'?: string;
}
/**
 * 
 * @export
 * @interface DomesticCircuitDto
 */
export interface DomesticCircuitDto {
    /**
     * 
     * @type {string}
     * @memberof DomesticCircuitDto
     */
    'deviceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomesticCircuitDto
     */
    'deviceName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomesticCircuitDto
     */
    'deviceInterface'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomesticCircuitDto
     */
    'interfaceDescription'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomesticCircuitDto
     */
    'checkTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof DomesticCircuitDto
     */
    'inputUsage'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomesticCircuitDto
     */
    'outputUsage'?: number;
    /**
     * 
     * @type {string}
     * @memberof DomesticCircuitDto
     */
    'remarks'?: string;
}
/**
 * 素材管理查詢任務Request目的: 依據素材名稱、素材描述，進行素材查詢，顯示於素材清單列表 (應含未刪除註記、最新版次、最新版本日期)列表包含項次(rowCount)、素材名稱(name)、素材描述(description)、最新版次(maxResVerCreated)、最新版本日期(maxResVer)
 * @export
 * @interface FindAllRes
 */
export interface FindAllRes {
    /**
     * 
     * @type {PageDomesticCircuitDto}
     * @memberof FindAllRes
     */
    'domesticCircuitDto'?: PageDomesticCircuitDto;
}
/**
 * response參數1: 查詢結果清單 包含項次(rowCount)、素材名稱(name)、素材描述(description)、最新版次(maxResVerCreated)、最新版本日期(maxResVer)
 * @export
 * @interface PageDomesticCircuitDto
 */
export interface PageDomesticCircuitDto {
    /**
     * 
     * @type {number}
     * @memberof PageDomesticCircuitDto
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageDomesticCircuitDto
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageDomesticCircuitDto
     */
    'size'?: number;
    /**
     * 
     * @type {Array<DomesticCircuitDto>}
     * @memberof PageDomesticCircuitDto
     */
    'content'?: Array<DomesticCircuitDto>;
    /**
     * 
     * @type {number}
     * @memberof PageDomesticCircuitDto
     */
    'number'?: number;
    /**
     * 
     * @type {Array<SortObject>}
     * @memberof PageDomesticCircuitDto
     */
    'sort'?: Array<SortObject>;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageDomesticCircuitDto
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {number}
     * @memberof PageDomesticCircuitDto
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageDomesticCircuitDto
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageDomesticCircuitDto
     */
    'last'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageDomesticCircuitDto
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface PageableObject
 */
export interface PageableObject {
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'offset'?: number;
    /**
     * 
     * @type {Array<SortObject>}
     * @memberof PageableObject
     */
    'sort'?: Array<SortObject>;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'paged'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'unpaged'?: boolean;
}
/**
 * 
 * @export
 * @interface SortObject
 */
export interface SortObject {
    /**
     * 
     * @type {string}
     * @memberof SortObject
     */
    'direction'?: string;
    /**
     * 
     * @type {string}
     * @memberof SortObject
     */
    'nullHandling'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'ascending'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SortObject
     */
    'property'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'ignoreCase'?: boolean;
}

/**
 * AlertReceiverApi - axios parameter creator
 * @export
 */
export const AlertReceiverApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AlertVM} alertVM 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllRes1: async (alertVM: AlertVM, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'alertVM' is not null or undefined
            assertParamExists('findAllRes1', 'alertVM', alertVM)
            const localVarPath = `/alerting/receiver`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(alertVM, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllRes2: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/alerting/getalert`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingCPU: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('settingCPU', 'id', id)
            const localVarPath = `/alerting/setting/cpu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingMemory: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('settingMemory', 'id', id)
            const localVarPath = `/alerting/setting/memory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlertReceiverApi - functional programming interface
 * @export
 */
export const AlertReceiverApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AlertReceiverApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AlertVM} alertVM 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllRes1(alertVM: AlertVM, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllRes1(alertVM, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllRes2(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllRes2(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingCPU(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingCPU(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingMemory(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingMemory(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AlertReceiverApi - factory interface
 * @export
 */
export const AlertReceiverApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AlertReceiverApiFp(configuration)
    return {
        /**
         * 
         * @param {AlertVM} alertVM 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllRes1(alertVM: AlertVM, options?: any): AxiosPromise<object> {
            return localVarFp.findAllRes1(alertVM, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllRes2(options?: any): AxiosPromise<string> {
            return localVarFp.findAllRes2(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingCPU(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.settingCPU(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingMemory(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.settingMemory(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AlertReceiverApi - object-oriented interface
 * @export
 * @class AlertReceiverApi
 * @extends {BaseAPI}
 */
export class AlertReceiverApi extends BaseAPI {
    /**
     * 
     * @param {AlertVM} alertVM 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertReceiverApi
     */
    public findAllRes1(alertVM: AlertVM, options?: AxiosRequestConfig) {
        return AlertReceiverApiFp(this.configuration).findAllRes1(alertVM, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertReceiverApi
     */
    public findAllRes2(options?: AxiosRequestConfig) {
        return AlertReceiverApiFp(this.configuration).findAllRes2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertReceiverApi
     */
    public settingCPU(id: string, options?: AxiosRequestConfig) {
        return AlertReceiverApiFp(this.configuration).settingCPU(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertReceiverApi
     */
    public settingMemory(id: string, options?: AxiosRequestConfig) {
        return AlertReceiverApiFp(this.configuration).settingMemory(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DomesticCircuitControllerApi - axios parameter creator
 * @export
 */
export const DomesticCircuitControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 取得素材清單
         * @param {object} body 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllRes: async (body: object, page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('findAllRes', 'body', body)
            const localVarPath = `/domesticCircuit/find/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DomesticCircuitControllerApi - functional programming interface
 * @export
 */
export const DomesticCircuitControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DomesticCircuitControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 取得素材清單
         * @param {object} body 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllRes(body: object, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindAllRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllRes(body, page, size, sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DomesticCircuitControllerApi - factory interface
 * @export
 */
export const DomesticCircuitControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DomesticCircuitControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 取得素材清單
         * @param {object} body 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllRes(body: object, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<FindAllRes> {
            return localVarFp.findAllRes(body, page, size, sort, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DomesticCircuitControllerApi - object-oriented interface
 * @export
 * @class DomesticCircuitControllerApi
 * @extends {BaseAPI}
 */
export class DomesticCircuitControllerApi extends BaseAPI {
    /**
     * 
     * @summary 取得素材清單
     * @param {object} body 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomesticCircuitControllerApi
     */
    public findAllRes(body: object, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) {
        return DomesticCircuitControllerApiFp(this.configuration).findAllRes(body, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ODS302WApi - axios parameter creator
 * @export
 */
export const ODS302WApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 依條件查詢主題
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        greeting: async (name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/greeting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ODS302WApi - functional programming interface
 * @export
 */
export const ODS302WApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ODS302WApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 依條件查詢主題
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async greeting(name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.greeting(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ODS302WApi - factory interface
 * @export
 */
export const ODS302WApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ODS302WApiFp(configuration)
    return {
        /**
         * 
         * @summary 依條件查詢主題
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        greeting(name?: string, options?: any): AxiosPromise<string> {
            return localVarFp.greeting(name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ODS302WApi - object-oriented interface
 * @export
 * @class ODS302WApi
 * @extends {BaseAPI}
 */
export class ODS302WApi extends BaseAPI {
    /**
     * 
     * @summary 依條件查詢主題
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ODS302WApi
     */
    public greeting(name?: string, options?: AxiosRequestConfig) {
        return ODS302WApiFp(this.configuration).greeting(name, options).then((request) => request(this.axios, this.basePath));
    }
}


