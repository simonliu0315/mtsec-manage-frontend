/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AlertVM
 */
export interface AlertVM {
    /**
     * 
     * @type {string}
     * @memberof AlertVM
     */
    'version'?: string;
    /**
     * 
     * @type {string}
     * @memberof AlertVM
     */
    'groupKey'?: string;
    /**
     * 
     * @type {number}
     * @memberof AlertVM
     */
    'truncatedAlerts'?: number;
    /**
     * 
     * @type {string}
     * @memberof AlertVM
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof AlertVM
     */
    'receiver'?: string;
    /**
     * 
     * @type {object}
     * @memberof AlertVM
     */
    'groupLabels'?: object;
    /**
     * 
     * @type {object}
     * @memberof AlertVM
     */
    'commonLabels'?: object;
    /**
     * 
     * @type {object}
     * @memberof AlertVM
     */
    'commonAnnotations'?: object;
    /**
     * 
     * @type {string}
     * @memberof AlertVM
     */
    'externalURL'?: string;
    /**
     * 
     * @type {Array<Alerts>}
     * @memberof AlertVM
     */
    'alerts'?: Array<Alerts>;
}
/**
 * 
 * @export
 * @interface Alerts
 */
export interface Alerts {
    /**
     * 
     * @type {string}
     * @memberof Alerts
     */
    'status'?: string;
    /**
     * 
     * @type {object}
     * @memberof Alerts
     */
    'labels'?: object;
    /**
     * 
     * @type {object}
     * @memberof Alerts
     */
    'annotations'?: object;
    /**
     * 
     * @type {string}
     * @memberof Alerts
     */
    'startsAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Alerts
     */
    'endsAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Alerts
     */
    'generatorURL'?: string;
    /**
     * 
     * @type {string}
     * @memberof Alerts
     */
    'fingerprint'?: string;
}
/**
 * 
 * @export
 * @interface DeleteOneReq
 */
export interface DeleteOneReq {
    /**
     * 
     * @type {string}
     * @memberof DeleteOneReq
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteOneReq
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteOneReq
     */
    'company'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteOneReq
     */
    'jobTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteOneReq
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteOneReq
     */
    'telephone'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteOneReq
     */
    'fax'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteOneReq
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteOneReq
     */
    'remark'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteOneReq
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteOneReq
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteOneReq
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteOneReq
     */
    'updatedBy'?: string;
}
/**
 * 素材管理查詢任務Request目的: 依據素材名稱、素材描述，進行素材查詢，顯示於素材清單列表 (應含未刪除註記、最新版次、最新版本日期)列表包含項次(rowCount)、素材名稱(name)、素材描述(description)、最新版次(maxResVerCreated)、最新版本日期(maxResVer)
 * @export
 * @interface FindAllReq
 */
export interface FindAllReq {
    /**
     * request參數1: 輸入之關鍵字
     * @type {string}
     * @memberof FindAllReq
     */
    'filter'?: string;
}
/**
 * 素材管理查詢任務Request目的: 依據素材名稱、素材描述，進行素材查詢，顯示於素材清單列表 (應含未刪除註記、最新版次、最新版本日期)列表包含項次(rowCount)、素材名稱(name)、素材描述(description)、最新版次(maxResVerCreated)、最新版本日期(maxResVer)
 * @export
 * @interface FindAllRes
 */
export interface FindAllRes {
    /**
     * 
     * @type {PageOperationTeamDto}
     * @memberof FindAllRes
     */
    'operationTeamDto'?: PageOperationTeamDto;
}
/**
 * 
 * @export
 * @interface FindEventHistoryReq
 */
export interface FindEventHistoryReq {
    /**
     * request參數1: 輸入之關鍵字
     * @type {string}
     * @memberof FindEventHistoryReq
     */
    'filter'?: string;
    /**
     * 
     * @type {number}
     * @memberof FindEventHistoryReq
     */
    'timeInterval'?: number;
}
/**
 * 
 * @export
 * @interface FindEventHistoryRes
 */
export interface FindEventHistoryRes {
    /**
     * 
     * @type {Array<string>}
     * @memberof FindEventHistoryRes
     */
    'checkTime'?: Array<string>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FindEventHistoryRes
     */
    'normalCnt'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FindEventHistoryRes
     */
    'minorCnt'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FindEventHistoryRes
     */
    'criticalCnt'?: Array<number>;
}
/**
 * 
 * @export
 * @interface FindEventReq
 */
export interface FindEventReq {
    /**
     * request參數1: 輸入之關鍵字
     * @type {string}
     * @memberof FindEventReq
     */
    'filter'?: string;
}
/**
 * 
 * @export
 * @interface FindEventRes
 */
export interface FindEventRes {
    /**
     * 
     * @type {number}
     * @memberof FindEventRes
     */
    'normalCnt'?: number;
    /**
     * 
     * @type {number}
     * @memberof FindEventRes
     */
    'minorCnt'?: number;
    /**
     * 
     * @type {number}
     * @memberof FindEventRes
     */
    'criticalCnt'?: number;
}
/**
 * 
 * @export
 * @interface FindOneReq
 */
export interface FindOneReq {
    /**
     * 
     * @type {string}
     * @memberof FindOneReq
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface FindOneRes
 */
export interface FindOneRes {
    /**
     * 
     * @type {OperationTeamDto}
     * @memberof FindOneRes
     */
    'operationTeamDto'?: OperationTeamDto;
}
/**
 * 
 * @export
 * @interface OperationTeamDto
 */
export interface OperationTeamDto {
    /**
     * 
     * @type {string}
     * @memberof OperationTeamDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OperationTeamDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof OperationTeamDto
     */
    'company'?: string;
    /**
     * 
     * @type {string}
     * @memberof OperationTeamDto
     */
    'jobTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof OperationTeamDto
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof OperationTeamDto
     */
    'telephone'?: string;
    /**
     * 
     * @type {string}
     * @memberof OperationTeamDto
     */
    'fax'?: string;
    /**
     * 
     * @type {string}
     * @memberof OperationTeamDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof OperationTeamDto
     */
    'remark'?: string;
    /**
     * 
     * @type {string}
     * @memberof OperationTeamDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof OperationTeamDto
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof OperationTeamDto
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof OperationTeamDto
     */
    'updatedBy'?: string;
}
/**
 * response參數1: 查詢結果清單 包含項次(rowCount)、素材名稱(name)、素材描述(description)、最新版次(maxResVerCreated)、最新版本日期(maxResVer)
 * @export
 * @interface PageOperationTeamDto
 */
export interface PageOperationTeamDto {
    /**
     * 
     * @type {number}
     * @memberof PageOperationTeamDto
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageOperationTeamDto
     */
    'totalPages'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageOperationTeamDto
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageOperationTeamDto
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageOperationTeamDto
     */
    'size'?: number;
    /**
     * 
     * @type {Array<OperationTeamDto>}
     * @memberof PageOperationTeamDto
     */
    'content'?: Array<OperationTeamDto>;
    /**
     * 
     * @type {number}
     * @memberof PageOperationTeamDto
     */
    'number'?: number;
    /**
     * 
     * @type {Array<SortObject>}
     * @memberof PageOperationTeamDto
     */
    'sort'?: Array<SortObject>;
    /**
     * 
     * @type {number}
     * @memberof PageOperationTeamDto
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageOperationTeamDto
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageOperationTeamDto
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface PageableObject
 */
export interface PageableObject {
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'offset'?: number;
    /**
     * 
     * @type {Array<SortObject>}
     * @memberof PageableObject
     */
    'sort'?: Array<SortObject>;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'paged'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageSize'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'unpaged'?: boolean;
}
/**
 * 
 * @export
 * @interface SortObject
 */
export interface SortObject {
    /**
     * 
     * @type {string}
     * @memberof SortObject
     */
    'direction'?: string;
    /**
     * 
     * @type {string}
     * @memberof SortObject
     */
    'nullHandling'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'ascending'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SortObject
     */
    'property'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'ignoreCase'?: boolean;
}
/**
 * 
 * @export
 * @interface UpdateOneReq
 */
export interface UpdateOneReq {
    /**
     * 
     * @type {string}
     * @memberof UpdateOneReq
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOneReq
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOneReq
     */
    'company'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOneReq
     */
    'jobTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOneReq
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOneReq
     */
    'telephone'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOneReq
     */
    'fax'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOneReq
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOneReq
     */
    'remark'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOneReq
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOneReq
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOneReq
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOneReq
     */
    'updatedBy'?: string;
}

/**
 * AlertReceiverApi - axios parameter creator
 * @export
 */
export const AlertReceiverApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AlertVM} alertVM 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllRes1: async (alertVM: AlertVM, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'alertVM' is not null or undefined
            assertParamExists('findAllRes1', 'alertVM', alertVM)
            const localVarPath = `/alerting/receiver`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(alertVM, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllRes2: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/alerting/getalert`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingCPU: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('settingCPU', 'id', id)
            const localVarPath = `/alerting/setting/cpu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingMemory: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('settingMemory', 'id', id)
            const localVarPath = `/alerting/setting/memory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlertReceiverApi - functional programming interface
 * @export
 */
export const AlertReceiverApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AlertReceiverApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AlertVM} alertVM 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllRes1(alertVM: AlertVM, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllRes1(alertVM, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllRes2(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllRes2(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingCPU(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingCPU(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingMemory(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingMemory(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AlertReceiverApi - factory interface
 * @export
 */
export const AlertReceiverApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AlertReceiverApiFp(configuration)
    return {
        /**
         * 
         * @param {AlertVM} alertVM 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllRes1(alertVM: AlertVM, options?: any): AxiosPromise<object> {
            return localVarFp.findAllRes1(alertVM, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllRes2(options?: any): AxiosPromise<string> {
            return localVarFp.findAllRes2(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingCPU(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.settingCPU(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingMemory(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.settingMemory(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AlertReceiverApi - object-oriented interface
 * @export
 * @class AlertReceiverApi
 * @extends {BaseAPI}
 */
export class AlertReceiverApi extends BaseAPI {
    /**
     * 
     * @param {AlertVM} alertVM 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertReceiverApi
     */
    public findAllRes1(alertVM: AlertVM, options?: AxiosRequestConfig) {
        return AlertReceiverApiFp(this.configuration).findAllRes1(alertVM, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertReceiverApi
     */
    public findAllRes2(options?: AxiosRequestConfig) {
        return AlertReceiverApiFp(this.configuration).findAllRes2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertReceiverApi
     */
    public settingCPU(id: string, options?: AxiosRequestConfig) {
        return AlertReceiverApiFp(this.configuration).settingCPU(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertReceiverApi
     */
    public settingMemory(id: string, options?: AxiosRequestConfig) {
        return AlertReceiverApiFp(this.configuration).settingMemory(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DomesticCircuitControllerApi - axios parameter creator
 * @export
 */
export const DomesticCircuitControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 取得素材清單
         * @param {FindAllReq} findAllReq 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllRes: async (findAllReq: FindAllReq, page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findAllReq' is not null or undefined
            assertParamExists('findAllRes', 'findAllReq', findAllReq)
            const localVarPath = `/domesticCircuit/find/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findAllReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得素材清單
         * @param {FindEventReq} findEventReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEventCnt: async (findEventReq: FindEventReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findEventReq' is not null or undefined
            assertParamExists('findEventCnt', 'findEventReq', findEventReq)
            const localVarPath = `/domesticCircuit/find/eventCnt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findEventReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得素材清單
         * @param {FindEventHistoryReq} findEventHistoryReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEventCntHistory: async (findEventHistoryReq: FindEventHistoryReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findEventHistoryReq' is not null or undefined
            assertParamExists('findEventCntHistory', 'findEventHistoryReq', findEventHistoryReq)
            const localVarPath = `/domesticCircuit/find/eventCntHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findEventHistoryReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DomesticCircuitControllerApi - functional programming interface
 * @export
 */
export const DomesticCircuitControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DomesticCircuitControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 取得素材清單
         * @param {FindAllReq} findAllReq 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllRes(findAllReq: FindAllReq, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindAllRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllRes(findAllReq, page, size, sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得素材清單
         * @param {FindEventReq} findEventReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findEventCnt(findEventReq: FindEventReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindEventRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findEventCnt(findEventReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得素材清單
         * @param {FindEventHistoryReq} findEventHistoryReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findEventCntHistory(findEventHistoryReq: FindEventHistoryReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindEventHistoryRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findEventCntHistory(findEventHistoryReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DomesticCircuitControllerApi - factory interface
 * @export
 */
export const DomesticCircuitControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DomesticCircuitControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 取得素材清單
         * @param {FindAllReq} findAllReq 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllRes(findAllReq: FindAllReq, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<FindAllRes> {
            return localVarFp.findAllRes(findAllReq, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得素材清單
         * @param {FindEventReq} findEventReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEventCnt(findEventReq: FindEventReq, options?: any): AxiosPromise<FindEventRes> {
            return localVarFp.findEventCnt(findEventReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得素材清單
         * @param {FindEventHistoryReq} findEventHistoryReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEventCntHistory(findEventHistoryReq: FindEventHistoryReq, options?: any): AxiosPromise<FindEventHistoryRes> {
            return localVarFp.findEventCntHistory(findEventHistoryReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DomesticCircuitControllerApi - object-oriented interface
 * @export
 * @class DomesticCircuitControllerApi
 * @extends {BaseAPI}
 */
export class DomesticCircuitControllerApi extends BaseAPI {
    /**
     * 
     * @summary 取得素材清單
     * @param {FindAllReq} findAllReq 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomesticCircuitControllerApi
     */
    public findAllRes(findAllReq: FindAllReq, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) {
        return DomesticCircuitControllerApiFp(this.configuration).findAllRes(findAllReq, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得素材清單
     * @param {FindEventReq} findEventReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomesticCircuitControllerApi
     */
    public findEventCnt(findEventReq: FindEventReq, options?: AxiosRequestConfig) {
        return DomesticCircuitControllerApiFp(this.configuration).findEventCnt(findEventReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得素材清單
     * @param {FindEventHistoryReq} findEventHistoryReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomesticCircuitControllerApi
     */
    public findEventCntHistory(findEventHistoryReq: FindEventHistoryReq, options?: AxiosRequestConfig) {
        return DomesticCircuitControllerApiFp(this.configuration).findEventCntHistory(findEventHistoryReq, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InventoryControllerApi - axios parameter creator
 * @export
 */
export const InventoryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 刪除資產
         * @param {DeleteOneReq} deleteOneReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneInventory: async (deleteOneReq: DeleteOneReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteOneReq' is not null or undefined
            assertParamExists('deleteOneInventory', 'deleteOneReq', deleteOneReq)
            const localVarPath = `/inventory/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteOneReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得資產
         * @param {FindAllReq} findAllReq 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllInventory: async (findAllReq: FindAllReq, page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findAllReq' is not null or undefined
            assertParamExists('findAllInventory', 'findAllReq', findAllReq)
            const localVarPath = `/inventory/find/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findAllReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得資產
         * @param {FindOneReq} findOneReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOneInventory: async (findOneReq: FindOneReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findOneReq' is not null or undefined
            assertParamExists('findOneInventory', 'findOneReq', findOneReq)
            const localVarPath = `/inventory/find/one`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findOneReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改資產
         * @param {UpdateOneReq} updateOneReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInventory: async (updateOneReq: UpdateOneReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateOneReq' is not null or undefined
            assertParamExists('updateInventory', 'updateOneReq', updateOneReq)
            const localVarPath = `/inventory/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOneReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InventoryControllerApi - functional programming interface
 * @export
 */
export const InventoryControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InventoryControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 刪除資產
         * @param {DeleteOneReq} deleteOneReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOneInventory(deleteOneReq: DeleteOneReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindOneRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOneInventory(deleteOneReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得資產
         * @param {FindAllReq} findAllReq 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllInventory(findAllReq: FindAllReq, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindAllRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllInventory(findAllReq, page, size, sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得資產
         * @param {FindOneReq} findOneReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findOneInventory(findOneReq: FindOneReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindOneRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findOneInventory(findOneReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 修改資產
         * @param {UpdateOneReq} updateOneReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInventory(updateOneReq: UpdateOneReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindOneRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateInventory(updateOneReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InventoryControllerApi - factory interface
 * @export
 */
export const InventoryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InventoryControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 刪除資產
         * @param {DeleteOneReq} deleteOneReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneInventory(deleteOneReq: DeleteOneReq, options?: any): AxiosPromise<FindOneRes> {
            return localVarFp.deleteOneInventory(deleteOneReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得資產
         * @param {FindAllReq} findAllReq 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllInventory(findAllReq: FindAllReq, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<FindAllRes> {
            return localVarFp.findAllInventory(findAllReq, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得資產
         * @param {FindOneReq} findOneReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOneInventory(findOneReq: FindOneReq, options?: any): AxiosPromise<FindOneRes> {
            return localVarFp.findOneInventory(findOneReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改資產
         * @param {UpdateOneReq} updateOneReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInventory(updateOneReq: UpdateOneReq, options?: any): AxiosPromise<FindOneRes> {
            return localVarFp.updateInventory(updateOneReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InventoryControllerApi - object-oriented interface
 * @export
 * @class InventoryControllerApi
 * @extends {BaseAPI}
 */
export class InventoryControllerApi extends BaseAPI {
    /**
     * 
     * @summary 刪除資產
     * @param {DeleteOneReq} deleteOneReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryControllerApi
     */
    public deleteOneInventory(deleteOneReq: DeleteOneReq, options?: AxiosRequestConfig) {
        return InventoryControllerApiFp(this.configuration).deleteOneInventory(deleteOneReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得資產
     * @param {FindAllReq} findAllReq 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryControllerApi
     */
    public findAllInventory(findAllReq: FindAllReq, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) {
        return InventoryControllerApiFp(this.configuration).findAllInventory(findAllReq, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得資產
     * @param {FindOneReq} findOneReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryControllerApi
     */
    public findOneInventory(findOneReq: FindOneReq, options?: AxiosRequestConfig) {
        return InventoryControllerApiFp(this.configuration).findOneInventory(findOneReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改資產
     * @param {UpdateOneReq} updateOneReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryControllerApi
     */
    public updateInventory(updateOneReq: UpdateOneReq, options?: AxiosRequestConfig) {
        return InventoryControllerApiFp(this.configuration).updateInventory(updateOneReq, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ODS302WApi - axios parameter creator
 * @export
 */
export const ODS302WApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 依條件查詢主題
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        greeting: async (name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/greeting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ODS302WApi - functional programming interface
 * @export
 */
export const ODS302WApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ODS302WApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 依條件查詢主題
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async greeting(name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.greeting(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ODS302WApi - factory interface
 * @export
 */
export const ODS302WApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ODS302WApiFp(configuration)
    return {
        /**
         * 
         * @summary 依條件查詢主題
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        greeting(name?: string, options?: any): AxiosPromise<string> {
            return localVarFp.greeting(name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ODS302WApi - object-oriented interface
 * @export
 * @class ODS302WApi
 * @extends {BaseAPI}
 */
export class ODS302WApi extends BaseAPI {
    /**
     * 
     * @summary 依條件查詢主題
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ODS302WApi
     */
    public greeting(name?: string, options?: AxiosRequestConfig) {
        return ODS302WApiFp(this.configuration).greeting(name, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OperationTeamControllerApi - axios parameter creator
 * @export
 */
export const OperationTeamControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 刪除資產
         * @param {DeleteOneReq} deleteOneReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneOperationTeam: async (deleteOneReq: DeleteOneReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteOneReq' is not null or undefined
            assertParamExists('deleteOneOperationTeam', 'deleteOneReq', deleteOneReq)
            const localVarPath = `/operationTeam/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteOneReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得資產
         * @param {FindAllReq} findAllReq 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllOperationTeam: async (findAllReq: FindAllReq, page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findAllReq' is not null or undefined
            assertParamExists('findAllOperationTeam', 'findAllReq', findAllReq)
            const localVarPath = `/operationTeam/find/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findAllReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得資產
         * @param {FindOneReq} findOneReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOneOperationTeam: async (findOneReq: FindOneReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findOneReq' is not null or undefined
            assertParamExists('findOneOperationTeam', 'findOneReq', findOneReq)
            const localVarPath = `/operationTeam/find/one`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findOneReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改資產
         * @param {UpdateOneReq} updateOneReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOperationTeam: async (updateOneReq: UpdateOneReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateOneReq' is not null or undefined
            assertParamExists('updateOperationTeam', 'updateOneReq', updateOneReq)
            const localVarPath = `/operationTeam/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOneReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OperationTeamControllerApi - functional programming interface
 * @export
 */
export const OperationTeamControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OperationTeamControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 刪除資產
         * @param {DeleteOneReq} deleteOneReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOneOperationTeam(deleteOneReq: DeleteOneReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindOneRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOneOperationTeam(deleteOneReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得資產
         * @param {FindAllReq} findAllReq 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllOperationTeam(findAllReq: FindAllReq, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindAllRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllOperationTeam(findAllReq, page, size, sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得資產
         * @param {FindOneReq} findOneReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findOneOperationTeam(findOneReq: FindOneReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindOneRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findOneOperationTeam(findOneReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 修改資產
         * @param {UpdateOneReq} updateOneReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOperationTeam(updateOneReq: UpdateOneReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindOneRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOperationTeam(updateOneReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OperationTeamControllerApi - factory interface
 * @export
 */
export const OperationTeamControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OperationTeamControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 刪除資產
         * @param {DeleteOneReq} deleteOneReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneOperationTeam(deleteOneReq: DeleteOneReq, options?: any): AxiosPromise<FindOneRes> {
            return localVarFp.deleteOneOperationTeam(deleteOneReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得資產
         * @param {FindAllReq} findAllReq 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllOperationTeam(findAllReq: FindAllReq, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<FindAllRes> {
            return localVarFp.findAllOperationTeam(findAllReq, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得資產
         * @param {FindOneReq} findOneReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOneOperationTeam(findOneReq: FindOneReq, options?: any): AxiosPromise<FindOneRes> {
            return localVarFp.findOneOperationTeam(findOneReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改資產
         * @param {UpdateOneReq} updateOneReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOperationTeam(updateOneReq: UpdateOneReq, options?: any): AxiosPromise<FindOneRes> {
            return localVarFp.updateOperationTeam(updateOneReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OperationTeamControllerApi - object-oriented interface
 * @export
 * @class OperationTeamControllerApi
 * @extends {BaseAPI}
 */
export class OperationTeamControllerApi extends BaseAPI {
    /**
     * 
     * @summary 刪除資產
     * @param {DeleteOneReq} deleteOneReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationTeamControllerApi
     */
    public deleteOneOperationTeam(deleteOneReq: DeleteOneReq, options?: AxiosRequestConfig) {
        return OperationTeamControllerApiFp(this.configuration).deleteOneOperationTeam(deleteOneReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得資產
     * @param {FindAllReq} findAllReq 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationTeamControllerApi
     */
    public findAllOperationTeam(findAllReq: FindAllReq, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) {
        return OperationTeamControllerApiFp(this.configuration).findAllOperationTeam(findAllReq, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得資產
     * @param {FindOneReq} findOneReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationTeamControllerApi
     */
    public findOneOperationTeam(findOneReq: FindOneReq, options?: AxiosRequestConfig) {
        return OperationTeamControllerApiFp(this.configuration).findOneOperationTeam(findOneReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改資產
     * @param {UpdateOneReq} updateOneReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationTeamControllerApi
     */
    public updateOperationTeam(updateOneReq: UpdateOneReq, options?: AxiosRequestConfig) {
        return OperationTeamControllerApiFp(this.configuration).updateOperationTeam(updateOneReq, options).then((request) => request(this.axios, this.basePath));
    }
}


